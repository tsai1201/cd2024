<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>41123247網誌</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-05-23T15:00:00+08:00</updated><entry><title>41123247-W14</title><link href="./41123247-w14-blog.html" rel="alternate"></link><published>2024-05-23T15:00:00+08:00</published><updated>2024-05-23T06:43:02+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-05-23:./41123247-w14-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 各組別利用NX來繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 各組別利用NX來繪圖&lt;/p&gt;


&lt;h1&gt;任務1:NX零件圖與錄影檔&lt;/h1&gt;
&lt;p&gt;每個組別需要利用NX程式來繪製出老師所給的五個圖檔。我們這組為了公平起見，使用抽籤的方式來選出五位組員進行畫圖的行動。由於我沒有被抽到，所以此任務無執行動作。&lt;/p&gt;</content><category term="w14"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W12</title><link href="./41123247-w12-blog.html" rel="alternate"></link><published>2024-05-09T15:00:00+08:00</published><updated>2024-05-23T07:19:16+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-05-09:./41123247-w12-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 各組別利用NX來繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 各組別利用NX來繪圖&lt;/p&gt;


&lt;h1&gt;任務1:NX零件圖與錄影檔&lt;/h1&gt;
&lt;p&gt;每個組別需要利用NX程式來繪製出老師所給的五個圖檔。我們這組為了公平起見，使用抽籤的方式來選出五位組員進行畫圖的行動。由於我沒有被抽到，所以此任務無執行動作。&lt;/p&gt;</content><category term="w12"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W11</title><link href="./41123247-w11-blog.html" rel="alternate"></link><published>2024-05-02T15:00:00+08:00</published><updated>2024-05-23T05:05:01+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-05-02:./41123247-w11-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 使用上週加入的全班倉儲，在裡面編寫前10週之心得統整，以每組為例。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 使用上週加入的全班倉儲，在裡面編寫前10週之心得統整，以每組為例。&lt;/p&gt;


&lt;h1&gt;使用上週加入的全班倉儲，在裡面編寫前10週的心得統整，以每組為例。&lt;/h1&gt;
&lt;p&gt;因為每個人都有權限可在上面改版，這樣就會出現一個問題:在 push 的時候只能有一個人推，如果全部的人同時推的話，就會出現一大堆的亂碼。我們所編輯的內容都會亂跑，這時就有個可行方法能解決這個問題並預防此問題的產生。就是在個人或各組完成階段性改版之前，先透過獨立分支進行資料改版提交與推送，等個人階段性版本確定後，再與分組組別進行分支合併，最後各組的階段性版本再與建立網頁的主分支進行合併。&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W10</title><link href="./41123247-w10-blog.html" rel="alternate"></link><published>2024-04-25T15:00:00+08:00</published><updated>2024-05-23T05:05:07+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-04-25:./41123247-w10-blog.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;任務1&lt;/h1&gt;
&lt;pre class="brush: python"&gt;
from browser import window, ajax

def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt"

  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text

      # 依照換行符號拆分資料
      lines = content.split('\n')

      # 建立空列表儲存資料
      data = []

      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue

        # 依照逗號拆分資料
        items = line.split(',')

        # 將拆分後的資料加入列表
        data.append(items)

      # 印出結果
      print(data)
    else:
      print("Error:", req.text)

  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()

# 呼叫函式讀取 CSV 資料
fetch_csv_data()
&lt;/pre&gt;
&lt;p&gt;只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html.&lt;/p&gt;
&lt;p&gt;並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別&lt;/p&gt;
&lt;p&gt;下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板：&lt;/p&gt;
&lt;pre class="brush: python"&gt;
  from browser import window, ajax, document, html

  def fetch_csv_data():
    # CSV 檔案網址
    url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"

    def on_complete(req):
      if req.status == 200 or req.status == 0:
        # 讀取 CSV 檔案內容
        content = req.text

        # 依照換行符號拆分資料
        lines = content.split('\n')

        # 建立空列表儲存資料
        data = []

        # 遍歷每一行資料
        for line in lines:
          # 忽略空白行
          if line.strip() == "":
            continue

          # 依照逗號拆分資料
          items = line.split(',')

          # 將拆分後的資料加入列表
          data.append(items)

        # 印出結果
        print(data)

        # 生成 HTML 元素
        generate_html(data)
      else:
        print("Error:", req.text)

    # 發送 AJAX 請求
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.open('GET', url, True)
    req.set_header('content-type', 'application/x-www-form-urlencoded')
    req.send()

  # 生成 HTML 元素
  def generate_html(data):
    brython_div = document["brython_div1"]
    course_title = "cd2024"
    for student_id, github_username, group in data:
      # 如果GitHub用戶名為空，將其設置為"000"
      github_username = github_username if github_username else "000"
      # 創建網址和倉庫的鏈接
      site_url = f"https://{github_username}.github.io/{course_title}"
      repo_url = f"https://github.com/{github_username}/{course_title}"
      group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"
      # 生成HTML元素並插入到div中
      brython_div &lt;= html.A(student_id, href=site_url) + " | " + \
                     html.A("GitHub Repo", href=repo_url) + " | " + \
                     html.A("Group Repo", href=group_repo_url) + html.BR()

  # 呼叫函式讀取 CSV 資料
  fetch_csv_data()
&lt;/pre&gt;
&lt;h1&gt;任務2&lt;/h1&gt;
&lt;p&gt;文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究)&lt;/p&gt;
&lt;p&gt;摘要內容 : 通過實施自動控制理論穩定動態系統時的局限性, 球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰.&lt;/p&gt;
&lt;p&gt;文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現)&lt;/p&gt;
&lt;p&gt;摘要內容 : 在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體。&lt;/p&gt;
&lt;p&gt;文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究)&lt;/p&gt;
&lt;p&gt;摘要內容 : 本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。&lt;/p&gt;
&lt;p&gt;文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現）&lt;/p&gt;
&lt;p&gt;摘要內容：開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統。&lt;/p&gt;
&lt;p&gt;文章五: Ball on the plate balancing control system (板上球平衡控制系統)&lt;/p&gt;
&lt;p&gt;摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。&lt;/p&gt;
&lt;p&gt;文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制)&lt;/p&gt;
&lt;p&gt;摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。&lt;/p&gt;
&lt;h1&gt;任務3&lt;/h1&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W13</title><link href="./41123247-w13-blog.html" rel="alternate"></link><published>2024-04-25T15:00:00+08:00</published><updated>2024-05-23T07:25:08+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-04-25:./41123247-w13-blog.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W9</title><link href="./41123247-w9-blog.html" rel="alternate"></link><published>2024-04-18T15:00:00+08:00</published><updated>2024-05-23T05:04:39+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-04-18:./41123247-w9-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, w1-w6內容統整&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, w1-w6內容統整&lt;/p&gt;


&lt;h1&gt;鋼球平衡台 PID 控制與模擬&lt;/h1&gt;
&lt;p&gt;使用 matplotlib 可視化 CoppeliaSim 鋼球平衡台 PID 控制
由於您沒有提供原本的 PID 控制程式碼，我將提供一個帶有 matplotlib 可視化的示例框架。請將您的 PID 控制邏輯替換到相應位置。
import zmq
import time
import matplotlib.pyplot as plt&lt;/p&gt;
&lt;h1&gt;ZMQ 參數&lt;/h1&gt;
&lt;p&gt;context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:23000")&lt;/p&gt;
&lt;h1&gt;PID 控制參數 (請根據您的實際情況調整)&lt;/h1&gt;
&lt;p&gt;Kp = 1.0
Ki = 0.1
Kd = 0.01&lt;/p&gt;
&lt;h1&gt;初始化&lt;/h1&gt;
&lt;p&gt;prev_error = 0
integral = 0
x_history = []
y_history = []&lt;/p&gt;
&lt;h1&gt;控制迴圈&lt;/h1&gt;
&lt;p&gt;while True:
    # 獲取鋼球位置
    socket.send_string("getBallPosition")
    message = socket.recv_string()
    x, y = map(float, message.split(","))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt; PID 控制邏輯 (請替換為您的控制邏輯)
error = 0 - x  # 假設目標位置為 x=0
integral += error &lt;span class="gs"&gt;* dt&lt;/span&gt;
&lt;span class="gs"&gt;derivative = (error - prev_error) / dt&lt;/span&gt;
&lt;span class="gs"&gt;output = Kp *&lt;/span&gt; error + Ki &lt;span class="gs"&gt;* integral + Kd *&lt;/span&gt; derivative

&lt;span class="gh"&gt;#&lt;/span&gt; 發送控制信號 (請根據您的實際情況修改)
socket.send_string(f&amp;quot;setMotorSpeed,{output}&amp;quot;)
_ = socket.recv_string()

&lt;span class="gh"&gt;#&lt;/span&gt; 紀錄歷史數據
x_history.append(x)
y_history.append(y)

&lt;span class="gh"&gt;#&lt;/span&gt; 更新誤差
prev_error = error

&lt;span class="gh"&gt;#&lt;/span&gt; 延遲
time.sleep(0.01)

&lt;span class="gh"&gt;#&lt;/span&gt; 繪製圖表 (例如每 100 步繪製一次)
if len(x_history) % 100 == 0:
    plt.plot(x_history, label=&amp;quot;X&amp;quot;)
    plt.plot(y_history, label=&amp;quot;Y&amp;quot;)
    plt.legend()
    plt.xlabel(&amp;quot;Time&amp;quot;)
    plt.ylabel(&amp;quot;Position&amp;quot;)
    plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Use code with caution.
Python
說明:
ZMQ 通訊: 使用 ZMQ 與 CoppeliaSim 進行通訊，獲取鋼球位置並發送控制信號。
PID 控制邏輯: 示例中使用一個簡單的 PID 控制邏輯，您需要替換為您的實際控制邏輯。
數據記錄: 紀錄鋼球的 x 和 y 方向座標歷史數據。
matplotlib 可視化: 使用 matplotlib 繪製 x 和 y 方向座標随時間變化的圖表，以便觀察控制效果。
請注意:
您需要根據您的實際情況修改 ZMQ 通訊端口、PID 控制參數、控制信號格式以及繪圖頻率。
確保您已經安裝了必要的 Python 模塊，例如 zmq 和 matplotlib。
希望這個示例框架能幫助您可視化 CoppeliaSim 鋼球平衡台的 PID 控制過程。&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W8</title><link href="./41123247-w7-blog.html" rel="alternate"></link><published>2024-04-11T15:00:00+08:00</published><updated>2024-05-23T05:04:29+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-04-11:./41123247-w7-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, w1-w6內容統整&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, w1-w6內容統整&lt;/p&gt;


&lt;h1&gt;w1-w6內容統整&lt;/h1&gt;
&lt;p&gt;老師所講的內容統整&lt;/p&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W6</title><link href="./41123247-w6-blog.html" rel="alternate"></link><published>2024-03-28T15:00:00+08:00</published><updated>2024-05-23T05:04:23+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-03-28:./41123247-w6-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 分組網誌的統整、 Github Actions 帶有子模組的 main.yml 設定、更新分組倉儲中的分組倉儲.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 分組網誌的統整、 Github Actions 帶有子模組的 main.yml 設定、更新分組倉儲中的分組倉儲.&lt;/p&gt;


&lt;h1&gt;Github Actions 帶有子模組的 main.yml 設定&lt;/h1&gt;
&lt;p&gt;我們所寫的內容丟到個人倉儲, 加上我們有把自己的子模組倒入分組倉儲, 加入取子模組內容的 main.yml 設定把我們所寫的內容整合起來.&lt;/p&gt;
&lt;p&gt;其中加入取子模組內容的設定為: 範例:2b-midbg4 cd_report.tex 中的範例報告第一章, 取自其組員分組網站中的 latex 目錄, 且圖片檔案也是沿用分組倉儲中的設定, 取自組員 images 目錄.&lt;/p&gt;
&lt;h1&gt;網誌的統整&lt;/h1&gt;
&lt;p&gt;如何把每個人的網誌整合到分組倉儲內, 整合前先把每個人子模組所連到的倉儲更新到現在狀態, 再利用 pelicanconf py 整合各組員的網誌.&lt;/p&gt;
&lt;h1&gt;更新分組倉儲中的分組倉儲&lt;/h1&gt;
&lt;p&gt;cd2024 2a w6 取下子模組, 以及更新學員倉儲內容&lt;/p&gt;
&lt;p&gt;先前我們有把每個人的倉儲利用子模組導入組別倉儲, 即使你自己的倉儲有更新內容, 也不會顯示目前更新次數, 如何讓子模組同步就利用 update 更新到最新版本. git submodule update --init cd 學號 git pull origin main cd .. git status git add . git commit -m "update 學號 子模組" git push&lt;/p&gt;
&lt;p&gt;就完成更新目前的倉儲&lt;/p&gt;
&lt;h1&gt;此為第六周內容&lt;/h1&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W5</title><link href="./41123247-w5-blog.html" rel="alternate"></link><published>2024-03-21T15:00:00+08:00</published><updated>2024-05-23T05:04:17+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-03-21:./41123247-w5-blog.html</id><summary type="html">&lt;p&gt;這週為課堂影片講解上字幕，組長依序分配每個成員所需要完成的影片及逐字稿，並上傳至YouTube，且在動態上打出摘要且心得。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;這週為課堂影片講解上字幕，組長依序分配每個成員所需要完成的影片及逐字稿，並上傳至YouTube，且在動態上打出摘要且心得。&lt;/p&gt;


&lt;h1&gt;上字幕&lt;/h1&gt;
&lt;p&gt;w5 2b 分組任務
請各組自行搜尋前面已經發布的教學影片, 分別在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上
從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排
並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/S-5QAeogShM?si=k885q4WrW7YuSly_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/v9EAEM2n8XA?si=GYusCQ4ZP2ZNdsqZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W4</title><link href="./41123247-w4-blog.html" rel="alternate"></link><published>2024-03-14T15:00:00+08:00</published><updated>2024-05-23T05:04:11+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-03-14:./41123247-w4-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時可導入 SourceTree 協助各組員更清楚看到倉儲改版歷程, 與本週分組作業.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時可導入 SourceTree 協助各組員更清楚看到倉儲改版歷程, 與本週分組作業.&lt;/p&gt;


&lt;h1&gt;分組任務&lt;/h1&gt;
&lt;p&gt;教學影片分組整理並自評: * 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 * 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 * 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點&lt;/p&gt;
&lt;h1&gt;Github 個人與分組倉儲的維護方式&lt;/h1&gt;
&lt;p&gt;個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 "-" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次. * 方法一 - Replit * 方法二 - Codespaces * 方法三 - Gitpod * 方法四 - localhost&lt;/p&gt;
&lt;h1&gt;此為第四周內容&lt;/h1&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W3</title><link href="./41123247-w3-blog.html" rel="alternate"></link><published>2024-03-07T15:00:00+08:00</published><updated>2024-05-23T05:04:01+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-03-07:./41123247-w3-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 主要說明如何善用 Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 主要說明如何善用 Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作.&lt;/p&gt;


&lt;h1&gt;子模組&lt;/h1&gt;
&lt;p&gt;如何利用 Github Codespaces 建立, cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站. 先 git submodule add 自己的倉儲空格學號, git add . , git commit -m "add 學號 submodule" , 最後在 git push.&lt;/p&gt;
&lt;h1&gt;期中報告&lt;/h1&gt;
&lt;p&gt;由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2a-midbgx_report.pdf 的製作.&lt;/p&gt;
&lt;h1&gt;此為第三周內容&lt;/h1&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W2</title><link href="./41123247-w2-blog.html" rel="alternate"></link><published>2024-02-29T15:00:00+08:00</published><updated>2024-05-23T06:49:41+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-02-29:./41123247-w2-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 主要利用 Github Classroom 進行協同分組, 並引導學員除了 Replit, 可以利用 Github Codespaces 維護個人或分組網站內容.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 協同產品設計實習課程教導, 主要利用 Github Classroom 進行協同分組, 並引導學員除了 Replit, 可以利用 Github Codespaces 維護個人或分組網站內容.&lt;/p&gt;


&lt;h1&gt;利用 Github Classroom 指定分組倉儲&lt;/h1&gt;
&lt;p&gt;分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 建立新 replit 先點 Create a Repl 再點 Import from GitHub 利用 From URL 把組別倉儲連結丟進來 (利用這個 My Repositories 是找不到的) , 選取 Python 語言, 按下 Import from GitHub 成功建立, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰 (每個人都要建立一個才有權限) 送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH (git@github.com:自己的帳號/cd2024.git) , 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版權限, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案.&lt;/p&gt;
&lt;h1&gt;利用 Codespaces 維護倉儲與網站&lt;/h1&gt;
&lt;p&gt;利用 init_replit 指令安裝所需 Python 模組&lt;/p&gt;
&lt;p&gt;啟動動態 指令 1.chmod u+x init_replit 2. ./init_replit 3. Python3 main.py&lt;/p&gt;
&lt;p&gt;靜態 指令 Python3 -m http.server&lt;/p&gt;
&lt;p&gt;Push 指令 1.git add . 2. git commit -m " add+你要推的內容 " 3. git push&lt;/p&gt;
&lt;h1&gt;此為第二周內容&lt;/h1&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W1</title><link href="./41123247-w1-blog.html" rel="alternate"></link><published>2024-02-22T15:00:00+08:00</published><updated>2024-05-23T06:49:44+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-02-22:./41123247-w1-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>